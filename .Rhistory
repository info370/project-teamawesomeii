mich_data <- read.csv("./gpa1.csv")
mich_data <- mich_data %>% dplyr::select(-X)
low_drink <- mich_data %>% filter(alcohol < 3)
high_drink <- mich_data %>% filter(alcohol >= 3)
# Scatterplot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
low_plot <- ggplot(low_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
high_plot <- ggplot(high_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
# Feature dplyr::selection
# all data
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% dplyr::select(-hsGPA)
model1 <- train(colGPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
# low
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_low <- low_drink %>% dplyr::select(-hsGPA)
model_low <- train(colGPA ~., data=colGPA_features_low, method = "knn", trControl = control)
importance_low <- varImp(model_low)
ggplot(importance_low)
# high
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_high <- high_drink %>% dplyr::select(-hsGPA)
model_high <- train(colGPA ~., data=colGPA_features_high, method = "knn", trControl = control)
importance_high <- varImp(model_high)
ggplot(importance_high)
ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA))
glmnet_ctrl <- trainControl(method="cv", number=10)
glmnet_ctrl <- trainControl(method="cv", number=5)
glmnet_grid <- expand.grid(alpha = c(0,  .1,  .2, .4, .6, .8, 1),
lambda = c(1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1,1))
glmnet_fit <- train(colGPA ~ ., data=mich_data[,],
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
if(!require(glmnet)){install.packages("glmnet"); require(glmnet)}
n
glmnet_fit <- train(colGPA ~ ., data=mich_data[,],
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data[, ],
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data[, .],
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data[, .],
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data,
method=glmnet,
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data,
method="cv",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
?train
glmnet_fit <- train(colGPA ~ ., data=mich_data,
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data,
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA))
linearMod <- lm(alcohol ~ colGPA, data=mich_data)
linearMod
plot(.06346*x + 1.70749)
plot(.06346*x + 1.70749)
plot(.06346*x + 1.70749, x)
ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA)) + geom_abline(intercept=1.70709, slope=0.06346)
p <- ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA))
p + geom_abline(intercept=1.70709, slope=0.06346)
p + geom_abline(slope=1.70709, intercept=0.06346)
linearMod <- lm(alcohol ~ colGPA, data=mich_data)
p + geom_abline(intercept=1.70709, slope=0.06346)
p + geom_abline(slope=1.70709, intercept=0.06346)
linearMod <- lm(colGPA ~ alcohol, data=mich_data)
linearMod
p + geom_abline(slope=0.004655, intercept=3.047889)
alc <- mich_data$alcohol
gpa <- mich_data$colGPA
cor(alc,gpa)
if(!require(splines)){install.packages("splines"); require(splines)}
#splines modeling
mod2 <- lm(colGPA ~ ns(alcohol, 2), data=mich_data)
mod2
mod3 <- lm(colGPA ~ ns(alcohol, 3), data=mich_data)
mod4 <- lm(colGPA ~ ns(alcohol, 4), data=mich_data)
mod5 <- lm(colGPA ~ ns(alcohol, 5), data=mich_data)
mod10 <- lm(colGPA ~ ns(alcohol, 10), data=mich_data)
mod20 <- lm(colGPA ~ ns(alcohol, 20), data=mich_data)
grid <- mich_data %>%
data_grid(x = seq_range(alcohol, n= 50, expand = 0.1)) %>%
gather_predictions(mod1, mod2, mod3, mod4, mod5, mod20, .pred = "y")
grid <- mich_data %>%
data_grid(x = seq_range(alcohol, n= 50, expand = 0.1)) %>%
gather_predictions(, mod2, mod3, mod4, mod5, mod10, mod20, .pred = "y")
grid <- mich_data %>%
data_grid(x = seq_range(alcohol, n= 50, expand = 0.1)) %>%
gather_predictions(mod2, mod3, mod4, mod5, mod10, mod20, .pred = "y")
grid <- mich_data %>%
data_grid(x = seq_range(x, n= 50, expand = 0.1)) %>%
gather_predictions(mod2, mod3, mod4, mod5, mod10, mod20, .pred = "y")
grid <- mich_data %>%
data_grid(x = seq_range(alcohol, n= 50, expand = 0.1)) %>%
gather_predictions(mod2, mod3, mod4, mod5, mod10, mod20, .pred = "y")
grid <- mich_data %>%
data_grid(x = seq_range(alcohol, n= 50, expand = 0.1)) %>%
gather_predictions(mod2, mod3, mod4, mod5, mod10, mod20, .pred = "y")
mod2
if(!require(DAAG)){install.packages("DAAG"); require(DAAG)}
cvResults <- suppressWarnings(CVlm(df=mich_data, form.lm=colGPA ~ alcohol, m=5, dots=FALSE, seed=370, legend.pos="topleft",
printit=FALSE, main="Small symbols are predicted values while bigger ones are actuals."));
?CVlm
# k-fold cross validation
library(DAAG)
cvResults <- CVlm(df=mich_data, form.lm=(colGPA ~ alcohol), m=5, dots=FALSE, seed=37, legend.pos="topleft")
model_high <- train(colGPA ~., data=colGPA_features_high, method = "knn", trControl = control)
importance_high <- varImp(model_high)
ggplot(importance_high)
predictors(importance_high)
control <- rfeControl(functions = rfFuncs, method="cv", number=10)
results <- rfe(mich_data[,1:28], df_boston[,29], sizes = c(1:28), rfeControl = control)
results <- rfe(mich_data[,1:28], mich_data[,29], sizes = c(1:28), rfeControl = control)
results <- rfe(mich_data[,1:28], mich_data[,29], sizes = c(1:28), rfeControl = control)
selected_features_high <- c("ACT", "greek", "PC", "siblings", "bgfriend","voluntr")
glmnet_fit <- train(colGPA ~ ., data=mich_data[,selected_features_high],
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_grid <- expand.grid(alpha = c(0,  .1,  .2, .4, .6, .8, 1),
lambda = c(1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1,1))
glmnet_ctrl <- trainControl(method="cv", number=5)
glmnet_fit <- train(colGPA ~ ., data=mich_data[,selected_features_high],
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_grid <- expand.grid(alpha = c(0,  .1,  .2, .4, .6, .8, 1),
lambda = c(1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1,1))
glmnet_ctrl <- trainControl(method="cv", number=5)
glmnet_fit <- train(colGPA ~ ., data=mich_data[,selected_features_high, "colGPA"],
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
glmnet_fit <- train(colGPA ~ ., data=mich_data[,c(selected_features_high, "colGPA")],
method="glmnet",
tuneGrid=glmnet_grid,
trControl=glmnet_ctrl)
View(mich_data)
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
colGPA_features <- mich_data %>% dplyr::select(-hsGPA)
# all data
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% dplyr::select(-hsGPA)
model1 <- train(colGPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
model1 <- train(colGPA ~., data=colGPA_features, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
all_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = skipped))  +
geom_point()
all_plot
colGPA
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA, size=skipped))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA, size=alcohol))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA, color=alcohol))  +
geom_point()
all_plot
skipped
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA, size=skipped))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA, size=skipped, color = bgfriend))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA, size=skipped))  +
geom_point(aes(color=greek))
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA, size=skipped))  +
geom_point()
all_plot
# low
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_low <- low_drink %>% dplyr::select(-hsGPA)
model_low <- train(colGPA ~., data=colGPA_features_low, method = "knn", trControl = control)
importance_low <- varImp(model_low)
ggplot(importance_low)
all_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA, ))  +
geom_point()
all_plot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
# skip plot
skip_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
skip_plot
# skip plot
skip_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA))  +
geom_point()
skip_plot
linearMod_skip <- lm(colGPA ~ skipped, data=mich_data)
linearMod_skip
skip_plot <- geom_abline(slope=-0.08952, intercept = 3.15308)
# skip plot
skip_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA))  +
geom_point()
skip_plot
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
skip <- mich_data$skipped
cor(skipped,gpa)
cor(skip,gpa)
cor(skip,alc)
cor(skip,alc) ^2
cor(skip,gpa)
summary(linearMod_skip)
sqrt(.06855)
# skip plot
skip_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA, size=alcohol))  +
geom_point()
linearMod <- lm(colGPA ~ alcohol, data=mich_data)
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)} # common datasets to use
if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(modelr)){install.packages("modelr"); library(modelr)}
# some dependencies for caret that aren't automatically installed
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret"); require(caret)} # ML package WITHOUT its dependencies. Should not take as long
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
set.seed(370)
if(!require(glmnet)){install.packages("glmnet"); require(glmnet)}
if(!require(caret)){install.packages("caret", dependencies = c("Depends", "Suggests")); require(caret)}
if(!require(splines)){install.packages("splines"); require(splines)}
if(!require(DAAG)){install.packages("DAAG"); require(DAAG)}
# load data
mich_data <- read.csv("./gpa1.csv")
mich_data <- mich_data %>% dplyr::select(-X)
low_drink <- mich_data %>% filter(alcohol < 3)
high_drink <- mich_data %>% filter(alcohol >= 3)
# Scatterplot
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
low_plot <- ggplot(low_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
high_plot <- ggplot(high_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
# Feature dplyr::selection
# all data
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% dplyr::select(-hsGPA)
model1 <- train(colGPA ~., data=colGPA_features, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
# low
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_low <- low_drink %>% dplyr::select(-hsGPA)
model_low <- train(colGPA ~., data=colGPA_features_low, method = "knn", trControl = control)
importance_low <- varImp(model_low)
ggplot(importance_low)
# high
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_high <- high_drink %>% dplyr::select(-hsGPA)
model_high <- train(colGPA ~., data=colGPA_features_high, method = "knn", trControl = control)
importance_high <- varImp(model_high)
predictors(importance_high)
ggplot(importance_high)
selected_features_high <- c("ACT", "greek", "PC", "siblings", "bgfriend","voluntr")
# tests
# try t-test for low vs high groups
#model
# skipped classes plot
skip_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA, size=alcohol))  +
geom_point()
skip_plot
linearMod_skip <- lm(colGPA ~ skipped, data=mich_data)
linearMod_skip
summary(linearMod_skip)
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
p <- ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA))
p + geom_abline(slope=0.004655, intercept=3.047889)
#basic linear model
linearMod <- lm(colGPA ~ alcohol, data=mich_data)
linearMod
#correlation
alc <- mich_data$alcohol
gpa <- mich_data$colGPA
skip <- mich_data$skipped
cor(skip,gpa)
p + geom_abline(slope=0.004655, intercept=3.047889)
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
p + geom_abline(slope=0.004655, intercept=3.047889)
#residual plot
mich_data$predAlc <- .004655*mich_data$alcohol + 3.047889
mich_data$residGPA <- mich_data$colGPA - mich_data$predAlc
ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=residGPA))
p3 <- ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=residGPA))
p + geom_abline(slope=0.004655, intercept=3.047889)
p3+geom_abline(intercept=0, color="red")
p3+geom_abline(slope=0, intercept = 0, color="red")
sum(mich_data$residGPA)
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)} # common datasets to use
if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(modelr)){install.packages("modelr"); library(modelr)}
# some dependencies for caret that aren't automatically installed
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret"); require(caret)} # ML package WITHOUT its dependencies. Should not take as long
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
if(!require(broom)){install.packages("broom"); require(broom)}
set.seed(370)
if(!require(caret)){install.packages("caret", dependencies = c("Depends", "Suggests")); require(caret)}
# load data
sleep_data <- read.csv("./Sleep Drinking - Sheet1.csv")
sleep_data <- sleep_data %>% dplyr::select(-LarkOwl, -DepressionStatus, -AnxietyStatus, -Stress)
p <- ggplot(sleep_data, aes(x = Drinks, y = GPA))  +
geom_point()
p <- ggplot(sleep_data, aes(x = Drinks, y = GPA))  +
geom_point()
p
# Feature selection
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model <- train(GPA ~., data=sleep_data, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
linear_model <- lm (GPA ~ Drinks, data = sleep_data)
parameters <- tidy(linear_model)$estimate
sleep_data_small <- sleep_data %>%
#mutate(GPA_negation = 4.0 - sleep_data$GPA) %>%
dplyr::select(Drinks, GPA) %>%
mutate(linear_model_prediction = parameters[1] + parameters[2] * sleep_data$Drinks)
ggplot(sleep_data_small , aes(Drinks)) +
geom_point(aes(y= GPA), size = 1) +
geom_line(aes(y= linear_model_prediction), size = 1, colour = "grey30")
measure_distance <- function(mod_params, data) {
diff <- data$GPA - model_function(mod_params, data)
sqrt(mean(diff ^ 2))
}
ggplot(sleep_data_small , aes(Drinks)) +
geom_point(aes(y= GPA), size = 1) +
geom_line(aes(y= linear_model_prediction), size = 1, colour = "grey30")
model_linear_function <- function(a, data) {
a[1] + data$Drinks * a[2]
}
model_function = model_linear_function
measure_distance <- function(mod_params, data) {
diff <- data$GPA - model_function(mod_params, data)
sqrt(mean(diff ^ 2))
}
# Here's a line fit with the objective function that lm uses - squares of the residuals
best <- optim(c(3.4, 0), measure_distance, data = sleep_data_small)
parameters <- tidy(linearMod)$estimate
mich_data_small <- mich_data %>%
dplyr::select(alcohol, GPA) %>%
mutate(linear_model_prediction = parameters[1] + parameters[2] * mich_data$alcohol)
mich_data_small <- mich_data %>%
dplyr::select(alcohol, colGPA) %>%
mutate(linear_model_prediction = parameters[1] + parameters[2] * mich_data$alcohol)
ggplot(mich_data_small , aes(alcohol)) +
geom_point(aes(y= colGPA), size = 1) +
geom_line(aes(y= linear_model_prediction), size = 1, colour = "grey30")
model_linear_function <- function(a, data) {
a[1] + data$alcohol * a[2]
}
model_function = model_linear_function
measure_distance <- function(mod_params, data) {
diff <- data$colGPA - model_function(mod_params, data)
sqrt(mean(diff ^ 2))
}
mean(mich_data %>% filter(alcohol=0.0))
mean(mich_data %>% filter(alcohol== 0.0))
mean(mich_data %>% filter(alcohol== 0))
best <- optim(c(0, 0), measure_distance, data = sleep_data_small)
best <- optim(c(0, 0), measure_distance, data = mich_data)
parameters
best$par
measure_distance_mad <- function(mod_params, data) {
diff <- data$GPA - model_function(mod_params, data)
mean(abs(diff))
}
diff <- data$colGPA - model_function(mod_params, data)
measure_distance_mad <- function(mod_params, data) {
diff <- data$colGPA - model_function(mod_params, data)
mean(abs(diff))
}
mad_fit <- optim(c(0, 0), measure_distance_mad, data = sleep_data_small)
mad_fit <- optim(c(0, 0), measure_distance_mad, data = mich_data_small)
mad_fit$par
ggplot(mich_data_small , aes(alcohol)) +
geom_point(aes(y= colGPA), size = 1) +
geom_line(aes(y= linear_model_prediction), size = 1, colour = "grey30")
ggplot(importance_high)
ggplot(importance_low)
ggplot(importance1)
ggplot(importance_low)
ggplot(importance_high)
ggplot(importance1)
p + geom_abline(slope=0.004655, intercept=3.047889)
p + geom_abline(slope=0.004655, intercept=3.047889)
p <- ggplot(data=mich_data) + geom_point(aes(x=alcohol, y=colGPA))
p + geom_abline(slope=0.004655, intercept=3.047889)
summary(linearMod)
ggplot(uci_data , aes(absences)) +
geom_point(aes(y= G3)) +
geom_line(aes(y= linear_model_prediction), color = "red")
ggplot(uci_data , aes(absences)) +
geom_point(aes(y= G3)) +
geom_line(aes(y= linear_model_prediction), color = "red")
# load data
uci_data <- read.csv("./student-mat.csv", stringsAsFactors = FALSE)
# Dalc data
uci_data$Dalc <- as.factor(uci_data$Dalc)
p <- ggplot(uci_data, aes(x = Dalc, y = G3)) +
geom_violin(trim = FALSE)
p + geom_boxplot(width=0.1)
ggplot(uci_data , aes(absences)) +
geom_point(aes(y= G3)) +
geom_line(aes(y= linear_model_prediction), color = "red")
p <- ggplot(uci_data, aes(x = Walc, y = G3)) +
geom_violin(trim = FALSE)
# Walc data
uci_data$Walc <- as.factor(uci_data$Walc)
p <- ggplot(uci_data, aes(x = Walc, y = G3)) +
geom_violin(trim = FALSE)
p + geom_boxplot(width=0.1)
# Feature selection for whole dataset
uci_data <- uci_data %>% dplyr::select(-failures)
final_grade_features <- uci_data %>% dplyr::select(-G1, -G2)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model <- train(G3 ~., data=final_grade_features, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
# model for absences
linear_model <- lm(G3 ~ absences, data=uci_data)
parameters = tidy(linear_model)$estimate
uci_data <- uci_data %>%
mutate(
linear_model_prediction = parameters[1] + parameters[2] * uci_data$absences
)
ggplot(uci_data , aes(absences)) +
geom_point(aes(y= G3)) +
geom_line(aes(y= linear_model_prediction), color = "red")
p + geom_boxplot(width=0.1)
# Dalc data
uci_data$Dalc <- as.factor(uci_data$Dalc)
p <- ggplot(uci_data, aes(x = Dalc, y = G3)) +
geom_violin(trim = FALSE)
p + geom_boxplot(width=0.1)
cor(skip,gpa)
cor(alc,gpa)
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
# skipped classes plot
skip_plot <- ggplot(mich_data, aes(x = skipped, y = colGPA))  +
geom_point()
skip_plot
linearMod_skip <- lm(colGPA ~ skipped, data=mich_data)
linearMod_skip
summary(linearMod_skip)
skip_plot + geom_abline(slope=-0.08952, intercept = 3.15308)
cor(skip,gpa)
# plot residuals
ggplot(uci_data, aes(absences)) +
geom_point(aes(y=residuals)) +
geom_point(aes(y=residuals_mad), color = "red") +
geom_abline(intercept=0, slope = 0)
ggplot(uci_data , aes(absences)) +
geom_point(aes(y= G3)) +
geom_line(aes(y= linear_model_prediction), color = "red")
# model for absences
linear_model <- lm(G3 ~ absences, data=uci_data)
summary(linear_model)
p3+geom_abline(slope=0, intercept = 0, color="red")
View(mod2)
p3 <- ggplot(data=mich_data) + geom_point(aes(x=skipped, y=residGPA))
p3+geom_abline(slope=0, intercept = 0, color="red")
mich_data$predSkip <- -0.08952*mich_data$skipped + 3.15308
mich_data$residGPA <- mich_data$colGPA - mich_data$predSkip
p3 <- ggplot(data=mich_data) + geom_point(aes(x=skipped, y=residGPA))
p3+geom_abline(slope=0, intercept = 0, color="red")
sum(mich_data$residGPA)
