mutate(renewables.ratio = as.numeric(State.annual.total.renewables.net.generation..MWh.) /
as.numeric(State.annual.total.nonrenewables.net.generation..MWh.))
# ------------------- #
# Tests Power
states <- power$State.abbreviation
emissions <- c("NOx", "SO2", "CO2", "CH4", "N20")
# add column for greatest source of fuel for each state
fuels <- power %>% mutate(Coal = as.numeric(gsub(",","",State.annual.coal.net.generation..MWh.)),
Oil = as.numeric(gsub(",","",State.annual.oil.net.generation..MWh.)),
Gas = as.numeric(gsub(",","",State.annual.gas.net.generation..MWh.)),
Nuclear = as.numeric(gsub(",","",State.annual.nuclear.net.generation..MWh.)),
Hydro = as.numeric(gsub(",","",State.annual.hydro.net.generation..MWh.)),
Biomass = as.numeric(gsub(",","",State.annual.biomass.net.generation..MWh.)),
Wind = as.numeric(gsub(",","",State.annual.wind.net.generation..MWh.)),
Solar = as.numeric(gsub(",","",State.annual.solar.net.generation..MWh.)),
Geothermal = as.numeric(gsub(",","",State.annual.geothermal.net.generation..MWh.)),
OtherFossil = as.numeric(gsub(",","",State.annual.other.fossil.net.generation..MWh.))) %>%
select(State.abbreviation, Coal, Oil, Gas, Nuclear, Hydro, Biomass, Wind, Solar, Geothermal, OtherFossil)
fuels[is.na(fuels)] <- " "
maxfuels <- as.data.frame(colnames(fuels)[apply(fuels,1,which.max)])
fuels <- bind_cols(fuels, maxfuels)
# Linear regression
input_output_data <- power %>% select(State.total.annual.heat.input..MMBtu., State.annual.net.generation..MWh.)
input_output_data <- na.omit(input_output_data)
#power_input_output_linearregression <- lm(as.numeric(State.annual.net.generation..MWh.)
#                                         ~ as.numeric(State.total.annual.heat.input..MMBtu.),
#                                          data=input_output_data)
#print(power_input_output_linearregression)
# add column for most emitted chemical
emissions <- power %>% mutate(NOx = as.numeric(gsub(",","",State.annual.NOx.emissions..tons.)),
SO2 = as.numeric(gsub(",","",State.annual.SO2.emissions..tons.)),
CO2 = as.numeric(gsub(",","",State.annual.CO2.emissions..tons.)),
CH4 = as.numeric(gsub(",","",State.annual.CH4.emissions..lbs.)), #convert to tons
N2O = as.numeric(gsub(",","",State.annual.N2O.emissions..lbs.)) #convert to tons
) %>%
select(State.abbreviation, NOx, SO2, CO2, CH4, N2O)
emissions[is.na(emissions)] <- " "
maxemissions <- as.data.frame(colnames(emissions)[apply(emissions,1,which.max)])
emissions <- bind_cols(emissions, maxemissions)
# ------------------- #
# Graphs Power
# emissions by state and emission type
state.emissiontype <- plot_ly(power, x = ~State.abbreviation, y = ~State.annual.NOx.emissions..tons.,
type = 'bar', name = 'NOx Emissions',
marker = list(color = 'rgb(193, 0, 0)')) %>%
add_trace(y = ~State.annual.SO2.emissions..tons., name = 'SO2 Emissions',
marker = list(color = 'rgb(249, 107, 107)')) %>%
add_trace(y = ~State.annual.CO2.emissions..tons., name = 'CO2 Emissions',
marker = list(color = 'rgb(252, 117, 0)')) %>%
add_trace(y = ~State.annual.CH4.emissions..lbs., name = 'CH4 Emissions',
marker = list(color = 'rgb(255, 199, 0)')) %>%
add_trace(y = ~State.annual.N2O.emissions..lbs., name = 'N2O Emissions',
marker = list(color = 'rgb(255, 228, 132)')) %>%
layout(yaxis = list(title = ""), xaxis = list(title = ""), barmode = 'stack',
title="Power Plant Emissions by State and Emission Type")
# generation by state and type
state.generationtype <- plot_ly(power, x = ~State.abbreviation, y = ~State.annual.coal.net.generation..MWh.,
type = 'bar', name = 'Coal',  marker = list(color = 'rgb(94, 0, 0)')) %>%
add_trace( y = ~State.annual.oil.net.generation..MWh., name = 'Oil',
marker = list(color = 'rgb(193, 0, 0)')) %>%
add_trace(y = ~State.annual.nuclear.net.generation..MWh., name = 'Nuclear',
marker = list(color = 'rgb(249, 107, 107)')) %>%
add_trace(y = ~State.annual.gas.net.generation..MWh., name = 'Gas',
marker = list(color = 'rgb(255, 174, 104)')) %>%
add_trace(y = ~State.annual.biomass.net.generation..MWh., name = 'Biomass',
marker = list(color = 'rgb(252, 117, 0)')) %>%
add_trace(y = ~State.annual.geothermal.net.generation..MWh., name = 'Geothermal',
marker = list(color = 'rgb(160, 74, 0)')) %>%
add_trace(y = ~State.annual.hydro.net.generation..MWh., name = 'Hydro',
marker = list(color = 'rgb(160, 125, 0)')) %>%
add_trace(y = ~State.annual.wind.net.generation..MWh., name = 'Wind',
marker = list(color = 'rgb(255, 199, 0)')) %>%
add_trace(y = ~State.annual.solar.net.generation..MWh., name = 'Solar',
marker = list(color = 'rgb(255, 228, 132)')) %>%
add_trace(y = ~State.annual.other.fossil.net.generation..MWh., name = 'Other Fossil',
marker = list(color = 'rgb(155, 155, 155)')) %>%
layout(yaxis = list(title = ''), xaxis = list(title = ""), barmode = 'stack',
title = "Power Plant Generation by State and Energy Type")
# States and combustion vs non combustion
combustion.map <- choroplthFunc(combustion.noncumbustion, combustion.noncumbustion$combustion.ratio,
combustion.noncumbustion$State.abbreviation, combustion.noncumbustion$combustion.ratio,
"States and Combustion Ratio", c("Yellow", "Red"))
# States and renewables vs non renewables
renewables.map <- choroplthFunc(renewables.nonrenewables, renewables.nonrenewables$renewables.ratio,
renewables.nonrenewables$State.abbreviation, renewables.nonrenewables$renewables.ratio,
"States and Renewables Ratio", c("Yellow", "Red"))
# Power linear regression graph of heat input and output
#power_lin_regression <- plot(as.numeric(input_output_data$State.total.annual.heat.input..MMBtu.),
#                             as.numeric(input_output_data$State.annual.net.generation..MWh.))
#power_lin_regression <- abline(power_input_output_linearregression)
#fit <- lm(as.numeric(State.annual.net.generation..MWh.)
#          ~ as.numeric(State.total.annual.heat.input..MMBtu.),
#          data = input_output_data)
#plot_ly(input_output_data, x = ~State.total.annual.heat.input..MMBtu.) %>%
#  add_markers(y = ~State.annual.net.generation..MWh.) %>%
#  add_lines(x = ~State.total.annual.heat.input..MMBtu., y = fitted(fit))
# ------------------- #
# Summary Stats Water
# ------------------- #
# Tests Water
# ------------------- #
# Graphs Water
emissions.generation <- power %>%
select(State.abbreviation, State.annual.NOx.emissions..tons.,
State.annual.CH4.emissions..lbs.,
State.annual.CO2.emissions..tons.,
State.annual.N2O.emissions..lbs.,
State.annual.SO2.emissions..tons.,
State.annual.net.generation..MWh.) %>%
filter(State.abbreviation != "DC") %>%
mutate(totalTesting = (as.numeric(State.annual.N2O.emissions..lbs.) * 0.0005) +
as.numeric(State.annual.CO2.emissions..tons.) +
as.numeric(State.annual.NOx.emissions..tons.) +
(as.numeric(State.annual.CH4.emissions..lbs.) * 0.0005)) %>%
mutate(emissions.total.gen = totalTesting / as.numeric(State.annual.net.generation..MWh.))
View(emissions.generation)
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "gplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
pew_s1 <- pew %>%
filter(sample == 1)
setwd("~/Documents/INFO470/lab-7")
pew_s1 <- pew %>%
filter(sample == 1)
chisq_df <- subset(pew_s1, select = c(party, smart1))
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "gplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library("car")
library("car")
library("reshape2")
library("dplyr")
library("dplyr")
library("gplots")
mpg <- read.csv("mpg.csv") # t-test data
setwd("~/Documents/INFO470/lab-7")
pew_s1 <- pew %>%
filter(sample == 1)
pew_s1 <- pew %>%
filter(sample == 1)
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "gplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
library("car")
library("reshape2")
library("dplyr")
library("gplots")
mpg <- read.csv("mpg.csv") # t-test data
pew <- read.csv("pew.csv") # chi-squared data
wpm <- read.csv("words.csv") # ANOVA data
pew_s1 <- pew %>%
filter(sample == 1)
chisq_df <- subset(pew_s1, select = c(party, smart1))
chisq_df <- chisq_df[complete.cases(chisq_df),] %>%
filter(party < 4) %>%
filter(smart1 < 8)
smart1_lookup <- read.table(text = "1	Yes, smartphone
2	No, not a smartphone
8	Not sure/Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("smart1", "smartphone")
, quote = "<")
party_lookup <- read.table(text = "1	Republican
2	Democrat
3	Independent
4	(VOL.) No preference
5	(VOL.) Other party
8	(VOL.) Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("party_code", "party")
, quote = "<"
)
smart1_lookup
View(smart1_lookup)
chisq_df <- merge(smart1_lookup
, chisq_df
, by.x = "smart1"
, by.y = "smart1")
chisq_df <- merge(party_lookup
, chisq_df
, by.x = "party_code"
, by.y = "party")
chisq_df <- subset(chisq_df, select = c("party", "smartphone"))
chisq_df <- droplevels(chisq_df)
ct <- table(chisq_df)
ct
# run the chi-squared test
chisq.test(ct)
balloonplot(t(ct), main ="Y / X", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
qchisq(.95, df=2)
chisq_df <- subset(pew_s1, select = c(party, q3))
chisq_df <- chisq_df[complete.cases(chisq_df),] %>%
filter(party < 4) %>%
filter(q3 < 8)
smart1_lookup <- read.table(text = "1	Yes, smartphone
2	No, not a smartphone
8	Not sure/Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("smart1", "smartphone")
, quote = "<")
party_lookup <- read.table(text = "1	Republican
2	Democrat
3	Independent
4	(VOL.) No preference
5	(VOL.) Other party
8	(VOL.) Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("party_code", "party")
, quote = "<"
)
q3_lookup <- read.table(text = "1	I feel overloaded
2	I like having a lot of information available
8	(VOL.) Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("q3_code", "info_overload")
, quote = "<"
)
chisq_df <- merge(q3_lookup
, chisq_df
, by.x = "q3_code"
, by.y = "q3")
chisq_df <- merge(party_lookup
, chisq_df
, by.x = "party_code"
, by.y = "party")
chisq_df <- subset(chisq_df, select = c("party", "info_overload"))
chisq_df <- droplevels(chisq_df)
ct <- table(chisq_df)
ct
chisq_df <- subset(pew_s1, select = c(party, q3))
chisq_df <- chisq_df[complete.cases(chisq_df),] %>%
filter(party < 4) %>%
filter(q3 < 8)
smart1_lookup <- read.table(text = "1	Yes, smartphone
2	No, not a smartphone
8	Not sure/Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("smart1", "smartphone")
, quote = "<")
party_lookup <- read.table(text = "1	Republican
2	Democrat
3	Independent
4	(VOL.) No preference
5	(VOL.) Other party
8	(VOL.) Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("party_code", "party")
, quote = "<"
)
q3_lookup <- read.table(text = "1	I feel overloaded
2	I like having a lot of information available
8	(VOL.) Don't know
9	(VOL.) Refused
"
, sep = "\t"
, header = FALSE
, col.names = c("q3_code", "info_overload")
, quote = "<"
)
chisq_df <- merge(q3_lookup
, chisq_df
, by.x = "q3_code"
, by.y = "q3")
chisq_df <- merge(party_lookup
, chisq_df
, by.x = "party_code"
, by.y = "party")
chisq_df <- subset(chisq_df, select = c("party", "info_overload"))
chisq_df <- droplevels(chisq_df)
ct <- table(chisq_df)
ct
# run the chi-squared test here
chisq.test(ct)
chisq.test(ct)
qchisq(.95, df=2)
mpg_long <- reshape2::melt(mpg)
leveneTest(value ~ variable, mpg_long)
t.test(value~variable,
data=mpg_long,
mu = 0, # difference is means = 0
alt = "two.sided", # specify two sided
conf = 0.95, # 95% confidence interval
var.eq = F, # unequal variances
paired = F) # unpaired t-test
t.test(value~variable,
data=mpg_long)
x <- seq(-20, 20, length=100)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="t Distribution")
# dt - t distribution with a degrees of freedom = 138.23
lines(x, dt(x,138.23), lwd=2, col="black")
?t.test
# run the t-test here
# hint: run ?t.test and lookup the alternative parameter settings
t.test(value~variable,
data=mpg_long,
mu = 0, # difference is means = 0
alt = "less", # specify one sided
conf = 0.95, # 95% confidence interval
var.eq = F, # unequal variances
paired = F) # unpaired t-test
# setup a linear model
words.mod = lm(formula = words ~ method, data = wpm)
summary(words.mod)
anova(words.mod)
ggplot(importance1)
alc_model <- train(Dalc ~., data=student_data, method = "knn", trControl = control)
importance_alc <- varImp(alc_model)
ggplot(importance_alc)
Dalc_features <- student_data %>% select(-Walc)
alc_model <- train(Dalc ~., data=Dalc_features, method = "knn", trControl = control)
importance_alc <- varImp(alc_model)
ggplot(importance_alc)
mich_data <- read.csv("./gpa1.csv")
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)} # common datasets to use
if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(modelr)){install.packages("modelr"); library(modelr)}
# some dependencies for caret that aren't automatically installed
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret"); require(caret)} # ML package WITHOUT its dependencies. Should not take as long
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
set.seed(370)
if(!require(caret)){install.packages("caret", dependencies = c("Depends", "Suggests")); require(caret)}
# load data
mich_data <- read.csv("./gpa1.csv")
mich_data <- read.csv("./gpa1.csv")
setwd("~/Documents/INFO370/project-teamawesomeii")
mich_data <- read.csv("./gpa1.csv")
View(mich_data)
p <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
p
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model1 <- train(colCPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model1 <- train(colCPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model1 <- train(colGPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% select(-hsGPA)
colGPA_features <- mich_data %>% select(-hsGPA)
model1 <- train(colGPA ~., data=mich_data, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% select(-hsGPA)
model1 <- train(colGPA ~., data=colGPA_features, method = "knn", trControl = control)
importance1 <- varImp(model1)
ggplot(importance1)
mich_data %>% filter(alcohol == 7)
hero <- mich_data %>% filter(alcohol == 7)
View(hero)
View(hero)
engineer <- mich_data %>% filter(engineer == 1)
engineer <- mich_data %>% filter(engineer == 1)
business <- mich_data %>% filter(business == 1)
p <- ggplot(mich_data, aes(x = engineer, y = colGPA))  +
geom_point()
p <- ggplot(mich_data, aes(x = engineer, y = colGPA))  +
geom_point()
p
engineer
View(engineer)
View(mich_data)
non <- mich_data %>% filter(engineer == 0, business == 0)
View(non)
p <- ggplot(mich_data, aes(x = age, y = colGPA))  +
geom_point()
p
ggplot(importance1)
mich_data <- mich_data %>% select(-X)
low_drink <- mich_data %>% filter(alcohol == 0)
View(low_drink)
low_drink <- mich_data %>% filter(alcohol == 0, 1)
View(low_drink)
low_drink <- mich_data %>% filter(alcohol == 0, alcohol == 1, alcohol == 2, alcohol == 3)
View(low_drink)
low_drink <- mich_data %>% filter(alcohol < 4)
View(low_drink)
high_drink <- mich_data %>% filter(alcohol > 4)
View(high_drink)
high_drink <- mich_data %>% filter(alcohol >=4)
View(high_drink)
mich_data <- read.csv("./gpa1.csv")
mich_data <- mich_data %>% select(-X)
low_drink <- mich_data %>% filter(alcohol < 3)
high_drink <- mich_data %>% filter(alcohol >= 3)
View(high_drink)
View(low_drink)
p <- ggplot(low_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
p
p <- ggplot(high_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
p <- ggplot(high_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
p
all_plot <- ggplot(mich_data, aes(x = alcohol, y = colGPA))  +
geom_point()
low_plot <- ggplot(low_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
high_plot <- ggplot(high_drink, aes(x = alcohol, y = colGPA))  +
geom_point()
all_plot
low_plot
high_plot
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_high <- high_drink %>% select(-hsGPA)
model_high <- train(colGPA ~., data=model_high, method = "knn", trControl = control)
importance_high <- varImp(model_high)
ggplot(importance_high)
importance_high <- varImp(model_high)
ggplot(importance_high)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_low <- low_drink %>% select(-hsGPA)
model_low <- train(colGPA ~., data=colGPA_features_low, method = "knn", trControl = control)
importance_low <- varImp(model_low)
ggplot(importance_low)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features_high <- high_drink %>% select(-hsGPA)
model_high <- train(colGPA ~., data=model_high, method = "knn", trControl = control)
model_high <- train(colGPA ~., data=colGPA_features_high, method = "knn", trControl = control)
importance_high <- varImp(model_high)
ggplot(importance_high)
ggplot(importance_low)
student_data <- read.csv("./Sleep Drinking - Sheet1.csv")
sleep_data <- read.csv("./Sleep Drinking - Sheet1.csv")
View(sleep_data)
all_plot <- ggplot(sleep_data, aes(x = Drinks, y = GPA))  +
geom_point()
p <- ggplot(sleep_data, aes(x = Drinks, y = GPA))  +
geom_point()
p
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model <- train(colGPA ~., data=sleep_data, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
sleep_data <- read.csv("./Sleep Drinking - Sheet1.csv")
p <- ggplot(sleep_data, aes(x = Drinks, y = GPA))  +
geom_point()
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model <- train(GPA ~., data=sleep_data, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
student_data <- student_data %>% select(-failures)
G1_features <- student_data %>% select(-G2, -G3)
G2_features <- student_data %>% select(-G1, -G3)
G3_features <- student_data %>% select(-G1, -G2)
Dalc_features <- student_data %>% select(-Walc)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model1 <- train(G1 ~., data=G1_features, method = "knn", trControl = control)
model2 <- train(G2 ~., data=G2_features, method = "knn", trControl = control)
model3 <- train(G3 ~., data=G3_features, method = "knn", trControl = control)
alc_model <- train(Dalc ~., data=Dalc_features, method = "knn", trControl = control)
importance1 <- varImp(model1)
importance2 <- varImp(model2)
importance3 <- varImp(model3)
importance_alc <- varImp(alc_model)
ggplot(importance1)
ggplot(importance2)
ggplot(importance3)
ggplot(importance_alc)
ggplot(importance1)
ggplot(importance2)
ggplot(importance3)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
colGPA_features <- mich_data %>% select(-hsGPA)
model <- train(colGPA ~., data=colGPA_features, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
ggplot(importance)
ggplot(importance)
ggplot(importance)
control <- trainControl(method="repeatedcv", number = 10, repeats = 3)
model <- train(GPA ~., data=sleep_data, method = "knn", trControl = control)
importance <- varImp(model)
ggplot(importance)
